---
title: "STAT 331 Portfolio"
author: "Yanna Shirokova"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv

# Challenge 3

teacher_data <- read_csv(here::here("data", "teacher_evals.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

# PA 4

military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 191)

```

-   `txt`

```{r}
#| label: wd-1-txt

# Check in 2.3 

ages_tab <- 
read_table
(file = here::here("Week 2", "Check-ins", "Ages_Data", "ages_tab.txt"))

```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2

# Lab 3, Question 5 

teacher_evals_clean = teacher_data |> 
  rename(sex=gender) |>
  filter(no_participants >= 10) |> 
  select(course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) |>
  mutate(
    across(.cols = course_id:teacher_id, .fns = ~ as.character(.x)),
    across(c(academic_degree, sex), as.factor))

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric

# Lab 3

ca_childcare_clean |>
  filter(study_year == 2008 | study_year == 2018) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop') |>
  pivot_wider(id_cols = region,
              names_from = study_year, 
              values_from = median_income, 
              names_prefix = "Income ") |>
  arrange(`Income 2018`)

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5 

person |>
  filter(
    (address_street_name == "Northwestern Dr" & 
     address_number == max(address_number)) | 
    (str_detect(name, "Annabel") &
    address_street_name == "Franklin Ave")) |>
  left_join(interview, by = c("id" = "person_id")) |>
  select(transcript)

```

-   factor

```{r}
#| label: wd-3-factor

# Lab 5 

person |>
  filter(
    (address_street_name == "Northwestern Dr" & 
     address_number == max(address_number)) | 
    (str_detect(name, "Annabel") &
    address_street_name == "Franklin Ave")) |>
  left_join(interview, by = c("id" = "person_id")) |>
  select(transcript)

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# Lab 5

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City", 
         type == "murder", 
         date == ymd(20180115)) |>
  select(description)

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric



```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

# Lab 4, Question 6

ca_childcare_long <- ca_childcare_clean |>
  select(study_year, region, mc_infant, mc_toddler, mc_preschool) |>
  # Transform wide to long format
  pivot_longer(cols = starts_with("mc_"), 
               # Create a new column "age" from the column names
               names_to = "age", 
               # The corresponding values will go in the "price" column
               values_to = "price") |>
  mutate(age = fct_relevel(case_when(
    age == "mc_infant" ~ "Infant",
    age == "mc_toddler" ~ "Toddler",
    age == "mc_preschool" ~ "Preschool"
  ), "Infant", "Toddler", "Preschool"))
ca_childcare_long

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

# Lab 4, Question 6

ca_childcare_long <- ca_childcare_clean |>
  select(study_year, region, mc_infant, mc_toddler, mc_preschool) |>
  # Transform wide to long format
  pivot_longer(cols = starts_with("mc_"), 
               # Create a new column "age" from the column names
               names_to = "age", 
               # The corresponding values will go in the "price" column
               values_to = "price") |>
  
  # Here! 
  mutate(age = fct_relevel(case_when(
    age == "mc_infant" ~ "Infant",
    age == "mc_toddler" ~ "Toddler",
    age == "mc_preschool" ~ "Preschool"
  ), "Infant", "Toddler", "Preschool"))
ca_childcare_long

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

# lab 5

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City", 
         type == "murder", 
         date == ymd(20180115)) |>
  select(description)

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

# Lab 5

person |>
  filter(
    (address_street_name == "Northwestern Dr" & 
     address_number == max(address_number)) | 
    (str_detect(name, "Annabel") &
    address_street_name == "Franklin Ave")) |>
  left_join(interview, by = c("id" = "person_id")) |>
  select(transcript)

```

-   `right_join()`

```{r}
#| label: wd-5-right


```

-   `inner_join()`

```{r}
#| label: wd-5-inner

# lab 5



```

-   `full_join()`

```{r}
#| label: wd-5-full


```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# Lab 4, Question 6

ca_childcare_long <- ca_childcare_clean |>
  select(study_year, region, mc_infant, mc_toddler, mc_preschool) |>
  # Transform wide to long format
  pivot_longer(cols = starts_with("mc_"), 
               # Create a new column "age" from the column names
               names_to = "age", 
               # The corresponding values will go in the "price" column
               values_to = "price") |>
  mutate(age = fct_relevel(case_when(
    age == "mc_infant" ~ "Infant",
    age == "mc_toddler" ~ "Toddler",
    age == "mc_preschool" ~ "Preschool"
  ), "Infant", "Toddler", "Preschool"))

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# Lab 4, Question 4

ca_childcare_clean |>
  filter(study_year == 2008 | study_year == 2018) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop') |>
  pivot_wider(id_cols = region,
              names_from = study_year, 
              values_from = median_income, 
              names_prefix = "Income ") |>
  arrange(`Income 2018`)

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: 

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Lab 4, Question 6

ggplot(data = ca_childcare_long, aes(x = study_year, y = price, 
  color = fct_reorder2(.f = region, .x = study_year, .y = price))) +
  geom_smooth(method = "loess", linewidth = 0.5) +  
  geom_point(size = 0.8, alpha = 0.5) + 
  # creates seperate graphs for age_groups
  # each has its own x-axis
  # in one row 
  facet_wrap(~ age, scales = "free_x", nrow=1) +  
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  # adjust axis
  scale_y_continuous(limits = c(100, 500), breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(
    # spaces the graphs apart, lines is a unit
    panel.spacing = unit(1, "lines"), 
    # change the aspect ratio to make it less tall
    aspect.ratio = 1, # make it less tall
    axis.text.x = element_text(size = 7), 
    axis.text.y = element_text(size = 7), 
    legend.title = element_text(size = 10), 
    legend.text = element_text(size = 8), 
    legend.key.size = unit(0.8, "lines")
  ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10))

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2





```

-   Example of function formatting

```{r}
#| label: r-2-3



```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1

```

-   I can use annotations

```{r}
#| label: dvs-3-2

```

-   I can be creative...

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

```

-   Example 2

```{r}
#| label: dvs-6-2

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   `across()`

```{r}
#| label: pe-1-across

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
