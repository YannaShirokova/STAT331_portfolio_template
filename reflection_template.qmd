---
title: "STAT 331 Portfolio"
author: "Yanna Shirokova"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv

# Challenge 3

teacher_data <- read_csv(here::here("data", "teacher_evals.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

# PA 4

military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 191)

```

-   `txt`

```{r}
#| label: wd-1-txt

# Check in 2.3 

ages_tab <- 
read_table
(file = here::here("Week 2", "Check-ins", "Ages_Data", "ages_tab.txt"))

```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2

# Lab 3, Question 5 

teacher_evals_clean = teacher_data |> 
  rename(sex=gender) |>
  filter(no_participants >= 10) |> 
  select(course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) |>
  mutate(
    across(.cols = course_id:teacher_id, .fns = ~ as.character(.x)),
    across(c(academic_degree, sex), as.factor))

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric

# Lab 4, Question 4

ca_childcare_clean |>
  filter(study_year == 2008 | study_year == 2018) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop') |>
  pivot_wider(id_cols = region,
              names_from = study_year, 
              values_from = median_income, 
              names_prefix = "Income ") |>
  arrange(`Income 2018`)

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5 

person |>
  filter(
    (address_street_name == "Northwestern Dr" & 
     address_number == max(address_number)) | 
    (str_detect(name, "Annabel") &
    address_street_name == "Franklin Ave")) |>
  left_join(interview, by = c("id" = "person_id")) |>
  select(transcript)

```

-   factor

```{r}
#| label: wd-3-factor

# Lab 5 

person |>
  filter(
    (address_street_name == "Northwestern Dr" & 
     address_number == max(address_number)) | 
    (str_detect(name, "Annabel") &
    address_street_name == "Franklin Ave")) |>
  left_join(interview, by = c("id" = "person_id")) |>
  select(transcript)

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# Lab 5

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City", 
         type == "murder", 
         date == ymd(20180115)) |>
  select(description)

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

# Challenge 3, Question 1
# I use to compare the question_no to just 903, 
# but here I made modifications so I just refer to the numbers without
# the leading 90. I also made sure to convert question_no back to a double
# as I converted it to a string to remove the 90.

teacher_evals_compare = teacher_data |> 
  mutate(
    question_no = as.numeric(str_remove(as.character(question_no), "^90")),
    SET_level = if_else(SET_score_avg >= 4, "excellent", "standard"),
    sen_level = if_else(seniority <= 4, "junior", "senior")) |> 
  filter(question_no == 3) |>
  select(course_id, SET_level, sen_level)

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

# Lab 4, Question 3

ca_childcare_clean <- ca_childcare |> # keep
  mutate(county_name = str_remove(county_name, " County")) |> 
  mutate(region = 
    fct_collapse(county_name,
      "Superior California" = c("Butte", "Colusa", "El Dorado", "Glenn", "Lassen", "Modoc", 
      "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", 
      "Tehama", "Yolo", "Yuba"), 
      "North Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"), 
      "San Francisco Bay Area" = c("Alameda", "Contra Costa", 
      "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"), 
      "Northeren San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", 
      "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"), 
      "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"), 
      "Southern San Joaquin Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"), 
      "Inland Empire" = c("Riverside", "San Bernardino"), 
      "Los Angeles County" = c("Los Angeles"), 
      "Orange County" = c("Orange"),
      "San-Diego Imperial" = c("Imperial", "San Diego")))

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

# Lab 4, Question 6

ca_childcare_long <- ca_childcare_clean |>
  select(study_year, region, mc_infant, mc_toddler, mc_preschool) |>
  # Transform wide to long format
  pivot_longer(cols = starts_with("mc_"), 
               # Create a new column "age" from the column names
               names_to = "age", 
               # The corresponding values will go in the "price" column
               values_to = "price") |>
  mutate(age = fct_relevel(case_when(
    age == "mc_infant" ~ "Infant",
    age == "mc_toddler" ~ "Toddler",
    age == "mc_preschool" ~ "Preschool"
  ), "Infant", "Toddler", "Preschool"))

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

# lab 5

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City", 
         type == "murder", 
         date == ymd(20180115)) |>
  select(description)

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

# Lab 5
# returns all the rows from the left table and the matching 
# rows from the right table

# Get only rows for people we want (include person and interview)
person |>
  filter(
    (address_street_name == "Northwestern Dr" & 
     address_number == max(address_number)) | 
    (str_detect(name, "Annabel") &
  address_street_name == "Franklin Ave")) |>
  left_join(interview, by = c("id" = "person_id")) |>
  select(transcript)

```

-   `right_join()`

```{r}
#| label: wd-5-right

# An example for portfolio: 
# returns all the rows from the right table and the matching rows 
# from the left table

# To see all interviews, but only have person info for those we want
person |>
  filter(
    (address_street_name == "Northwestern Dr" & 
     address_number == max(address_number)) | 
    (str_detect(name, "Annabel") &
    address_street_name == "Franklin Ave")) |>
    right_join(interview, by = c("id" = "person_id"))

```

-   `inner_join()`

```{r}
#| label: wd-5-inner

# lab 5
# returns only the rows where there is a match in both tables 

drivers_license |>
  rename(license_id = id) |>
  filter(
    gender == "female",             
    hair_color == "red",            
    height >= 65 & height <= 67,                  
    car_make == "Tesla",           
    car_model == "Model S"          
  ) |>
  left_join(person, by = "license_id") |>
  inner_join(facebook_event_checkin, by = c("id" = "person_id")) |>
  # since date is a double, change to character first
  filter(str_starts(as.character(date), "2017"),
         event_name == "SQL Symphony Concert") |>
  group_by(id) |>
  summarise(event_count = n(), .groups = "drop") |>
  filter(event_count == 3) |>
  inner_join(person, by = "id") |>
  left_join(interview, by = c("id" = "person_id")) |>
  # Confirm new suspect = shouldn't have an interview 
  select(name, transcript)

```

-   `full_join()`

```{r}
#| label: wd-5-full

# Includes everything from both tables (na) if no match

person |>
  filter(
    (address_street_name == "Northwestern Dr" & 
     address_number == max(address_number)) | 
    (str_detect(name, "Annabel") &
    address_street_name == "Franklin Ave")) |>
    full_join(interview, by = c("id" = "person_id")) 

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

# returns rows from one table where there is a match in another table, 
# but it does not return any columns from the second table

# includes person info for people we want, no interviews
person |>
  filter(
    (address_street_name == "Northwestern Dr" & 
     address_number == max(address_number)) | 
    (str_detect(name, "Annabel") &
    address_street_name == "Franklin Ave")) |>
    semi_join(interview, by = c("id" = "person_id")) 

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

# anti join is a type of join that returns rows from one table where there 
# are no matches in another table

# All people who don't have an interview
person |>
    anti_join(interview, by = c("id" = "person_id")) 

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# Lab 4, Question 6

ca_childcare_long <- ca_childcare_clean |>
  select(study_year, region, mc_infant, mc_toddler, mc_preschool) |>
  # Transform wide to long format
  pivot_longer(cols = starts_with("mc_"), 
               # Create a new column "age" from the column names
               names_to = "age", 
               # The corresponding values will go in the "price" column
               values_to = "price") |>
  mutate(age = fct_relevel(case_when(
    age == "mc_infant" ~ "Infant",
    age == "mc_toddler" ~ "Toddler",
    age == "mc_preschool" ~ "Preschool"
  ), "Infant", "Toddler", "Preschool"))

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# Lab 4, Question 4

ca_childcare_clean |>
  filter(study_year == 2008 | study_year == 2018) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop') |>
  pivot_wider(id_cols = region,
              names_from = study_year, 
              values_from = median_income, 
              names_prefix = "Income ") |>
  arrange(`Income 2018`)

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: Lab 4, Lab 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Lab 4, Question 6

#| label: recreate-plot
#| echo: true
#| warning: false
#| message: false

ggplot(data = ca_childcare_long, aes(x = study_year, y = price, 
  color = fct_reorder2(.f = region, .x = study_year, .y = price))) +
  geom_smooth(method = "loess", linewidth = 0.5) +  
  geom_point(size = 0.8, alpha = 0.5) + 
  # creates separate graphs for age_groups
  # each has its own x-axis
  # in one row 
  facet_wrap(~ age, scales = "free_x", nrow=1) +  
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  # adjust axis
  scale_y_continuous(limits = c(100, 500), breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(
    # spaces the graphs apart, lines is a unit
    panel.spacing = unit(1, "lines"), 
    # change the aspect ratio to make it less tall
    aspect.ratio = 1, # make it less tall
    axis.text.x = element_text(size = 7), 
    axis.text.y = element_text(size = 7), 
    legend.title = element_text(size = 10), 
    legend.text = element_text(size = 8), 
    legend.key.size = unit(0.8, "lines")
  ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10))

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

# Lab 4, Question 6

#| label: recreate-plot
#| echo: true
#| warning: false
#| message: false

ca_childcare_long <- ca_childcare_clean |>
  select(study_year, region, mc_infant, mc_toddler, mc_preschool) |>
  # Transform wide to long format
  pivot_longer(cols = starts_with("mc_"), 
               # Create a new column "age" from the column names
               names_to = "age", 
               # The corresponding values will go in the "price" column
               values_to = "price") |>
  mutate(age = fct_relevel(case_when(
    age == "mc_infant" ~ "Infant",
    age == "mc_toddler" ~ "Toddler",
    age == "mc_preschool" ~ "Preschool"
  ), "Infant", "Toddler", "Preschool"))

```

-   Example of function formatting

```{r}
#| label: r-2-3



```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

# Lab 4, Question 4

ca_childcare_clean |>
  filter(study_year == 2008 | study_year == 2018) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop') |>
  pivot_wider(id_cols = region,
              names_from = study_year, 
              values_from = median_income, 
              names_prefix = "Income ") |>
  arrange(`Income 2018`)

```

-   Example of function stops

```{r}
#| label: r-3-function-stops



```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

# Lab 4, Question 7

ggplot(data = ca_childcare, aes(x = mhi_2018, y = mc_infant)) +
  geom_point(alpha = 0.5) +  
  geom_smooth(method = "lm", color = "steelblue") + 
  labs(
    title = "Correlation Between Household Income 
    and Center-Based Childcare Costs in California",
    y = "",
    x = "2018 Dollars",
    subtitle = "Median Weekly Price for Infants"
  ) +
  theme_minimal()  

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Lab 2, Question 16

ggplot(data = surveys, 
    mapping = aes(x = species, y = weight)) +
    geom_boxplot(outliers = FALSE) +
    geom_jitter(color = "steelblue", alpha = 0.2) +
    labs(
    x = "",
    subtitle = "Species",
    y = "Weight (grams)",
    title = "Analyzing Weight Distributions Across Various Rodents") +
    coord_flip()

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

# Lab 4, Question 6
ggplot(data = ca_childcare_long, aes(x = study_year, y = price, 
  color = fct_reorder2(.f = region, .x = study_year, .y = price))) +
  geom_smooth(method = "loess", linewidth = 0.5) +  
  geom_point(size = 0.8, alpha = 0.5) + 
  # creates seperate graphs for age_groups
  # each has its own x-axis
  # in one row 
  facet_wrap(~ age, scales = "free_x", nrow=1) +  
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  # adjust axis
  scale_y_continuous(limits = c(100, 500), breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(
    # spaces the graphs apart, lines is a unit
    panel.spacing = unit(1, "lines"), 
    # change the aspect ratio to make it less tall
    aspect.ratio = 1, # make it less tall
    axis.text.x = element_text(size = 7), 
    axis.text.y = element_text(size = 7), 
    legend.title = element_text(size = 10), 
    legend.text = element_text(size = 8), 
    legend.key.size = unit(0.8, "lines")
  ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10))

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

# Lab 4, Question 6

ggplot(data = ca_childcare_long, aes(x = study_year, y = price, 
  color = fct_reorder2(.f = region, .x = study_year, .y = price))) +
  geom_smooth(method = "loess", linewidth = 0.5) +  
  geom_point(size = 0.8, alpha = 0.5) + 
  # creates seperate graphs for age_groups
  # each has its own x-axis
  # in one row 
  facet_wrap(~ age, scales = "free_x", nrow=1) +  
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  # adjust axis
  scale_y_continuous(limits = c(100, 500), breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(
    # spaces the graphs apart, lines is a unit
    panel.spacing = unit(1, "lines"), 
    # change the aspect ratio to make it less tall
    aspect.ratio = 1, # make it less tall
    axis.text.x = element_text(size = 7), 
    axis.text.y = element_text(size = 7), 
    legend.title = element_text(size = 10), 
    legend.text = element_text(size = 8), 
    legend.key.size = unit(0.8, "lines")
  ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10))

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

# Lab 2, Question 16

ggplot(data = surveys, 
    mapping = aes(x = species, y = weight)) +
    geom_boxplot(outliers = FALSE) +
    geom_jitter(color = "steelblue", alpha = 0.2) +
    labs(
    x = "",
    subtitle = "Species",
    y = "Weight (grams)",
    title = "Analyzing Weight Distributions Across Various Rodents") +
    # Don't need to tilt head!
    coord_flip() 

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2

# Lab 4, Question 5

ggplot(data = ca_childcare_long, aes(x = study_year, y = price, 
  color = fct_reorder2(.f = region, .x = study_year, .y = price))) +
  geom_smooth(method = "loess", linewidth = 0.5) +  
  geom_point(size = 0.8, alpha = 0.5) + 
  # creates separate graphs for age_groups
  # each has its own x-axis
  # in one row 
  facet_wrap(~ age, scales = "free_x", nrow=1) +  
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  # adjust axis
  scale_y_continuous(limits = c(100, 500), breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(
    # spaces the graphs apart, lines is a unit
    panel.spacing = unit(1, "lines"), 
    # change the aspect ratio to make it less tall
    aspect.ratio = 1, # make it less tall
    axis.text.x = element_text(size = 7), 
    axis.text.y = element_text(size = 7), 
    legend.title = element_text(size = 10), 
    legend.text = element_text(size = 8), 
    legend.key.size = unit(0.8, "lines")
  ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10))

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3

# Lab 4, Question 5

ggplot(data = ca_childcare_long, aes(x = study_year, y = price, 
  color = fct_reorder2(.f = region, .x = study_year, .y = price))) +
  geom_smooth(method = "loess", linewidth = 0.5) +  
  geom_point(size = 0.8, alpha = 0.5) + 
  # creates separate graphs for age_groups
  # each has its own x-axis
  # in one row 
  facet_wrap(~ age, scales = "free_x", nrow=1) +  
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  # adjust axis
  scale_y_continuous(limits = c(100, 500), breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(
    # spaces the graphs apart, lines is a unit
    panel.spacing = unit(1, "lines"), 
    # change the aspect ratio to make it less tall
    aspect.ratio = 1, # make it less tall
    axis.text.x = element_text(size = 7), 
    axis.text.y = element_text(size = 7), 
    legend.title = element_text(size = 10), 
    legend.text = element_text(size = 8), 
    legend.key.size = unit(0.8, "lines")
  ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10))

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1

# Lab 4, Question 6

ggplot(data = ca_childcare_long, aes(x = study_year, y = price, 
  color = fct_reorder2(.f = region, .x = study_year, .y = price))) +
  geom_smooth(method = "loess", linewidth = 0.5) +  
  geom_point(size = 0.8, alpha = 0.5) + 
  # creates separate graphs for age_groups
  # each has its own x-axis
  # in one row 
  facet_wrap(~ age, scales = "free_x", nrow=1) +  
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  # adjust axis
  scale_y_continuous(limits = c(100, 500), breaks = seq(100, 500, by = 100)) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(
    # spaces the graphs apart, lines is a unit
    panel.spacing = unit(1, "lines"), 
    # change the aspect ratio to make it less tall
    aspect.ratio = 1, # make it less tall
    axis.text.x = element_text(size = 7), 
    axis.text.y = element_text(size = 7), 
    legend.title = element_text(size = 10), 
    legend.text = element_text(size = 8), 
    legend.key.size = unit(0.8, "lines")
  ) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10))

```

-   I can use annotations

```{r}
#| label: dvs-3-2

# Challenge 2, Hot
# Originally didn't do this challenge, I added it now

ggplot(data = surveys, 
       mapping = aes(x = species, y = weight, color = genus)) + 
    #geom_jitter(alpha = 0.2) +
    geom_boxplot() +
    labs(
      x = "",
      subtitle = "Species",
      y = "Weight (grams)",
      title = "Analyzing Weight Distributions Across Various Rodents") +
    coord_flip() +
    theme(legend.position = "none") + 
    scale_color_manual(values = cdPalette_grey) + 
    annotate("text", x = 1, y = 250, label = "Neotoma") + 
    annotate("text", x = 2, y = 250, label = "Chaetodipus") +
    annotate("text", x = 3, y = 250, label = "Peromyscus") + 
    annotate("text", x = 4, y = 250, label = "Perognathus") +
    annotate("text", x = 5, y = 250, label = "Reithrodontomys") + 
    annotate("text", x = 6, y = 250, label = "Sigmodon") +
    annotate("text", x = 7, y = 250, label = "Onychomys") + 
    annotate("text", x = 8, y = 250, label = "Peromyscus") +
    annotate("text", x = 9, y = 250, label = "Reithrodontomys") +
    annotate("text", x = 10, y = 250, label = "Dipodomys") + 
    annotate("text", x = 11, y = 250, label = "Dipodomys") +
    annotate("text", x = 12, y = 250, label = "Chaetodipus") + 
    annotate("text", x = 13, y = 250, label = "Dipodomys") +
    annotate("text", x = 14, y = 250, label = "Onychomys")



```

-   I can be creative...

```{r}
#| label: dvs-3-3

# Challenge 2, Spicy

ggplot(data = surveys, 
    mapping = aes(x = species, y = weight, fill = genus)) +
    # swapped the geoms to see the colors better!
    geom_jitter(color = "steelblue", alpha = 0.2, width = 0.1, height = 0) +
    geom_boxplot(outliers = FALSE) +
    labs(
      x = "", 
      y = "Weight (grams)",
      subtitle = "Species", 
      title = "Analyzing Weight Distributions Across Rodents"
    ) +
    scale_fill_brewer(palette = "Set3") +
    coord_flip()

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

# lab 3, Question 10

teacher_evals_clean |>
  group_by(teacher_id) |>
  filter(question_no == 901) |>
  summarize(avg = mean(SET_score_avg, na.rm = TRUE)) |>
  filter(avg == min(avg) | avg == max(avg))


```

-   Example using `across()`

```{r}
#| label: dvs-4-across

# Used data from lab 3 to demonstrate across!

teacher_evals_clean |>
  filter(question_no == 901) |> 
  group_by(teacher_id) |>
  summarize(
    across(.cols = c(no_participants, resp_share, SET_score_avg),
      .fns = mean, 
      .names = "{.col}_avg"))

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# Lab 5 

drivers_license |>
  rename(license_id = id) |>
  filter(
    gender == "female",             
    hair_color == "red",            
    height >= 65 & height <= 67,                  
    car_make == "Tesla",           
    car_model == "Model S"          
  ) |>
  left_join(person, by = "license_id") |>
  inner_join(facebook_event_checkin, by = c("id" = "person_id")) |>
  # since date is a double, change to character first
  filter(str_starts(as.character(date), "2017"),
         event_name == "SQL Symphony Concert") |>
  group_by(id) |>
  summarise(event_count = n(), .groups = "drop") |>
  filter(event_count == 3) |>
  inner_join(person, by = "id") |>
  left_join(interview, by = c("id" = "person_id")) |>
  # Confirm new suspect = shouldn't have an interview 
  select(name, transcript)

```

-   Example 2

```{r}
#| label: dvs-5-2

# Lab 3, Question 9
teacher_evals_clean |>
  group_by(teacher_id, course_id) |>
  filter(n_distinct(question_no) == 9) |>
  summarize()

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

# Lab 4, Question 4

ca_childcare_clean |>
  filter(study_year == 2008 | study_year == 2018) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = 'drop') |>
  pivot_wider(id_cols = region,
              names_from = study_year, 
              values_from = median_income, 
              names_prefix = "Income ") |>
  arrange(`Income 2018`)

```

-   Example 2

```{r}
#| label: dvs-6-2

# Lab 3, Question 12
# I added better titles

teacher_evals_clean |>
  group_by(teacher_id) |>
  filter(sex == "female", academic_degree %in% c("dr", "prof")) |>
  summarize(avg = mean(resp_share, na.rm = TRUE)) |>
  filter(avg == min(avg) | avg == max(avg)) |>
  rename(`Female Teacher` = teacher_id, 
         `Average Response Rate (Min/ Max)` = avg)
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

# Lab 5 

drivers_license |>
  rename(license_id = id) |>
  filter(
    gender == "female",             
    hair_color == "red",            
    height >= 65 & height <= 67,                  
    car_make == "Tesla",           
    car_model == "Model S"          
  ) |>
  left_join(person, by = "license_id") |>
  inner_join(facebook_event_checkin, by = c("id" = "person_id")) |>
  # since date is a double, change to character first
  filter(str_starts(as.character(date), "2017"),
         event_name == "SQL Symphony Concert") |>
  group_by(id) |>
  summarise(event_count = n(), .groups = "drop") |>
  filter(event_count == 3) |>
  inner_join(person, by = "id") |>
  left_join(interview, by = c("id" = "person_id")) |>
  # Confirm new suspect = shouldn't have an interview 
  select(name, transcript)

```

-   `across()`

```{r}
#| label: pe-1-across

# Lab 3, Question 5
# Fixed the second across to have .cols and .fns

teacher_evals_clean = teacher_data |> 
  rename(sex=gender) |>
  filter(no_participants >= 10) |> 
  select(course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) |>
  mutate(
    across(.cols = course_id:teacher_id, .fns = ~ as.character(.x)),
    across(.cols = c(academic_degree, sex), .fns = ~ as.factor(.x)))

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

# Lab 4, Question 6
# Part of my growing, using case_when() instead of recode() 

ca_childcare_long <- ca_childcare_clean |>
  select(study_year, region, mc_infant, mc_toddler, mc_preschool) |>
  # Transform wide to long format
  pivot_longer(cols = starts_with("mc_"), 
               # Create a new column "age" from the column names
               names_to = "age", 
               # The corresponding values will go in the "price" column
               values_to = "price") |>
  mutate(age = fct_relevel(case_when(
    age == "mc_infant" ~ "Infant",
    age == "mc_toddler" ~ "Toddler",
    age == "mc_preschool" ~ "Preschool"
  ), "Infant", "Toddler", "Preschool"))
ca_childcare_long

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

# Lab 4, Question 6
# I combined the pipeline with the ggplot!

ca_childcare_clean |>
  select(study_year, region, mc_infant, mc_toddler, mc_preschool) |>
  # Transform wide to long format
  pivot_longer(cols = starts_with("mc_"), 
               # Create a new column "age" from the column names
               names_to = "age", 
               # The corresponding values will go in the "price" column
               values_to = "price") |>
  mutate(age = fct_relevel(case_when(
    age == "mc_infant" ~ "Infant",
    age == "mc_toddler" ~ "Toddler",
    age == "mc_preschool" ~ "Preschool"
  ), "Infant", "Toddler", "Preschool")) |>
  ggplot(aes(x = study_year, y = price, 
    color = fct_reorder2(.f = region, .x = study_year, .y = price))) +
    geom_smooth(method = "loess", linewidth = 0.5) +  
    geom_point(size = 0.8, alpha = 0.5) + 
    # creates separate graphs for age_groups
    # each has its own x-axis
    # in one row 
    facet_wrap(~ age, scales = "free_x", nrow=1) +  
    labs(title = "Weekly Median Price for Center-Based Childcare ($)",
         x = "Study Year",
         y = "",
         color = "California Region") +
    # adjust axis
    scale_y_continuous(limits = c(100, 500), breaks = seq(100, 500, by = 100)) +
    scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
    theme_bw() +
    theme(
      # spaces the graphs apart, lines is a unit
      panel.spacing = unit(1, "lines"), 
      # change the aspect ratio to make it less tall
      aspect.ratio = 1, # make it less tall
      axis.text.x = element_text(size = 7), 
      axis.text.y = element_text(size = 7), 
      legend.title = element_text(size = 10), 
      legend.text = element_text(size = 8), 
      legend.key.size = unit(0.8, "lines")
    ) +
    scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(10))

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

# Lab 4, Question 8
# Linear Regression

reg_mod1 <- lm(mc_infant ~ mhi_2018, data = ca_childcare)
summary(reg_mod1)


```

-   Example 2

```{r}
#| label: dsm-2-2

# Challenge 3, Question 3

chisq.test(teacher_evals_compare$SET_level, 
          teacher_evals_compare$sen_level)

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
